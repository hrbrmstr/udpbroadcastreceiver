// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// udp_path_logger
void udp_path_logger(int port, std::string path);
RcppExport SEXP _udpbroadcastreceiver_udp_path_logger(SEXP portSEXP, SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type port(portSEXP);
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    udp_path_logger(port, path);
    return R_NilValue;
END_RCPP
}
// udp_callback_logger
SEXP udp_callback_logger(int port, Function callback);
RcppExport SEXP _udpbroadcastreceiver_udp_callback_logger(SEXP portSEXP, SEXP callbackSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type port(portSEXP);
    Rcpp::traits::input_parameter< Function >::type callback(callbackSEXP);
    rcpp_result_gen = Rcpp::wrap(udp_callback_logger(port, callback));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_udpbroadcastreceiver_udp_path_logger", (DL_FUNC) &_udpbroadcastreceiver_udp_path_logger, 2},
    {"_udpbroadcastreceiver_udp_callback_logger", (DL_FUNC) &_udpbroadcastreceiver_udp_callback_logger, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_udpbroadcastreceiver(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
